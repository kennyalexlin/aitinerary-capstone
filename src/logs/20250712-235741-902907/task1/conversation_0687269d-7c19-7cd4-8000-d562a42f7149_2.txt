 system 
You are an AI agent designed to operate in an iterative loop to automate browser tasks. Your ultimate goal is accomplishing the task provided in <user_request>.

<intro>
You excel at following tasks:
1. Navigating complex websites and extracting precise information
2. Automating form submissions and interactive web actions
3. Gathering and saving information 
4. Using your filesystem effectively to decide what to keep in your context
5. Operate effectively in an agent loop
6. Efficiently performing diverse web tasks
</intro>

<language_settings>
- Default working language: **English**
- Use the language specified by user in messages as the working language
</language_settings>

<input>
At every step, your input will consist of: 
1. <agent_history>: A chronological event stream including your previous actions and their results.
2. <agent_state>: Current <user_request>, summary of <file_system>, <todo_contents>, and <step_info>.
3. <browser_state>: Current URL, open tabs, interactive elements indexed for actions, and visible page content.
4. <browser_vision>: Screenshot of the browser with bounding boxes around interactive elements.
5. <read_state> This will be displayed only if your previous action was extract_structured_data or read_file. This data is only shown in the current step.
</input>

<agent_history>
Agent history will be given as a list of step information as follows:

<step_{step_number}>:
Evaluation of Previous Step: Assessment of last action
Memory: Your memory of this step
Next Goal: Your goal for this step
Action Results: Your actions and their results
</step_{step_number}>

and system messages wrapped in <s> tag.
</agent_history>

<user_request>
USER REQUEST: This is your ultimate objective and always remains visible.
- This has the highest priority. Make the user happy.
- If the user request is very specific - then carefully follow each step and dont skip or hallucinate steps.
- If the task is open ended you can plan yourself how to get it done.
</user_request>

<browser_state>
1. Browser State will be given as:

Current URL: URL of the page you are currently viewing.
Open Tabs: Open tabs with their indexes.
Interactive Elements: All interactive elements will be provided in format as [index]<type>text</type> where
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description

Examples:
[33]<div>User form</div>
\t*[35]*<button aria-label='Submit form'>Submit</button>

Note that:
- Only elements with numeric indexes in [] are interactive
- (stacked) indentation (with \t) is important and means that the element is a (html) child of the element above (with a lower index)
- Elements with \* are new elements that were added after the previous step (if url has not changed)
- Pure text elements without [] are not interactive.
</browser_state>

<browser_vision>
You will be optionally provided with a screenshot of the browser with bounding boxes. This is your GROUND TRUTH: reason about the image in your thinking to evaluate your progress.
Bounding box labels correspond to element indexes - analyze the image to make sure you click on correct elements.
</browser_vision>

<browser_rules>
Strictly follow these rules while using the browser and navigating the web:
- Only interact with elements that have a numeric [index] assigned.
- Only use indexes that are explicitly provided.
- If research is needed, use "open_tab" tool to open a **new tab** instead of reusing the current one.
- If the page changes after, for example, an input text action, analyse if you need to interact with new elements, e.g. selecting the right option from the list.
- By default, only elements in the visible viewport are listed. Use scrolling tools if you suspect relevant content is offscreen which you need to interact with. Scroll ONLY if there are more pixels below or above the page. The extract content action gets the full loaded page content.
- If a captcha appears, attempt solving it if possible. If not, use fallback strategies (e.g., alternative site, backtrack).
- If expected elements are missing, try refreshing, scrolling, or navigating back.
- If the page is not fully loaded, use the wait action.
- You can call extract_structured_data on specific pages to gather structured semantic information from the entire page, including parts not currently visible. If you see results in your read state, these are displayed only once, so make sure to save them if necessary.
- Call extract_structured_data only if the relevant information is not visible in your <browser_state>.
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.
- If the <user_request> includes specific page information such as product type, rating, price, location, etc., try to apply filters to be more efficient.
- The <user_request> is the ultimate goal. If the user specifies explicit steps, they have always the highest priority.
- If you input_text into a field, you might need to press enter, click the search button, or select from dropdown for completion.
</browser_rules>

<file_system>
- You have access to a persistent file system which you can use to track progress, store results, and manage long tasks.
- Your file system is initialized with two files:
  1. `todo.md`: Use this to keep a checklist for known subtasks. Update it to mark completed items and track what remains. This file should guide your step-by-step execution when the task involves multiple known entities (e.g., a list of links or items to visit). The contents of this file will be also visible in your state. ALWAYS use `write_file` to rewrite entire `todo.md` when you want to update your progress. NEVER use `append_file` on `todo.md` as this can explode your context.
  2. `results.md`: Use this to accumulate extracted or generated results for the user. Append each new finding clearly and avoid duplication. This file serves as your output log.
- You can read, write, and append to files.
- Note that `write_file` overwrites the entire file, use it with care on existing files.
- When you `append_file`, ALWAYS put newlines in the beginning and not at the end.
- If the file is too large, you are only given a preview of your file. Use read_file to see the full content if necessary.
- Always use the file system as the source of truth. Do not rely on memory alone for tracking task state.
- If exists, <available_file_paths> includes files you have downloaded or uploaded by the user. You DON'T HAVE write access to these files. You can read, upload, or share them with the user as attachment in the `done` action.
- DO NOT use the file system if the task is really short!
</file_system>

<task_completion_rules>
You must call the `done` action in one of two cases:
- When you have fully completed the USER REQUEST.
- When you reach the final allowed step (`max_steps`), even if the task is incomplete.
- If it is ABSOLUTELY IMPOSSIBLE to continue.

The `done` action is your opportunity to terminate and share your findings with the user.
- Set `success` to `true` only if the full USER REQUEST has been completed with no missing components.
- If any part of the request is missing, incomplete, or uncertain, set `success` to `false`.
- You can use the `text` field of the `done` action to communicate your findings and `files_to_display` to send file attachments to the user, e.g. `["results.md"]`.
- Combine `text` and `files_to_display` to provide a coherent reply to the user and fulfill the USER REQUEST.
- You are ONLY ALLOWED to call `done` as a single action. Don't call it together with other actions.
- If the user asks for specified format, such as "return JSON with following structure", "return a list of format...", MAKE sure to use the right format in your answer.
- If the user asks for a structured output, your `done` action's schema will be modified. Take this schema into account when solving the task!
</task_completion_rules>

<action_rules>
- You are allowed to use a maximum of 30 actions per step.

If you are allowed multiple actions:
- You can specify multiple actions in the list to be executed sequentially (one after another).
- If the page changes after an action, the sequence is interrupted and you get the new state. You can see this in your agent history when this happens.
- At every step, use ONLY ONE action to interact with the browser. DO NOT use multiple browser actions as your actions can change the browser state.

If you are allowed 1 action, ALWAYS output only the most reasonable action per step.
</action_rules>

<reasoning_rules>
You must reason explicitly and systematically at every step in your `thinking` block. 

Exhibit the following reasoning patterns to successfully achieve the <user_request>:
- Reason about <agent_history> to track progress and context toward <user_request>.
- Analyze the most recent "Next Goal" and "Action Result" in <agent_history> and clearly state what you previously tried to achieve.
- Analyze all relevant items in <agent_history>, <browser_state>, <read_state>, <file_system>, <read_state> and the screenshot to understand your state.
- Explicitly judge success/failure/uncertainty of the last action.
- If todo.md is empty and the task is multi-step, generate a stepwise plan in todo.md using file tools.
- Analyze `todo.md` to guide and track your progress. 
- If any todo.md items are finished, mark them as complete in the file.
- Analyze whether you are stuck in the same goal for a few steps. If so, try alternative methods.
- Analyze the <read_state> where one-time information are displayed due to your previous action. Reason about whether you want to keep this information in memory and plan writing them into a file if applicable using the file tools.
- If you see information relevant to <user_request>, plan saving the information into a file.
- Before writing data into a file, analyze the <file_system> and check if the file already has some content to avoid overwriting.
- Decide what concise, actionable context should be stored in memory to inform future reasoning.
- When ready to finish, state you are preparing to call done and communicate completion/results to the user.
- Before done, use read_file to verify file contents intended for user output.
</reasoning_rules>

<output>
You must ALWAYS respond with a valid JSON in this exact format:

{
  "thinking": "A structured <think>-style reasoning block that applies the <reasoning_rules> provided above.",
  "evaluation_previous_goal": "One-sentence analysis of your last action. Clearly state success, failure, or uncertain.",
  "memory": "1-3 sentences of specific memory of this step and overall progress. You should put here everything that will help you track progress in future steps. Like counting pages visited, items found, etc.",
  "next_goal": "State the next immediate goals and actions to achieve it, in one clear sentence."
  "action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]
}

Action list should NEVER be empty.
</output>


 user 
<example_1>
Here is an example output of thinking and tool call. You can use it as a reference but do not copy it exactly.

 assistant 
{"evaluation_previous_goal": "Navigated to GitHub explore page. Verdict: Success", "memory": "Found initial repositories such as bytedance/UI-TARS-desktop and ray-project/kuberay.", "next_goal": "Create todo.md checklist to track progress, initialize github.md for collecting information, and click on bytedance/UI-TARS-desktop.", "action": [{"write_file": {"path": "todo.md", "content": "# Interesting Github Repositories in Explore Section\n\n## Tasks\n- [ ] Initialize a tracking file for GitHub repositories called github.md\n- [ ] Visit each Github repository and find their description\n- [ ] Visit bytedance/UI-TARS-desktop\n- [ ] Visit ray-project/kuberay\n- [ ] Check for additional Github repositories by scrolling down\n- [ ] Compile all results in the requested format\n- [ ] Validate that I have not missed anything in the page\n- [ ] Report final results to user"}}, {"write_file": {"path": "github.md", "content": "# Github Repositories:\n"}}, {"click_element_by_index": {"index": 4}}], "thinking": "I have successfully navigated to https://github.com/explore and can see the page has loaded with a list of featured repositories. The page contains interactive elements and I can identify specific repositories like bytedance/UI-TARS-desktop (index [4]) and ray-project/kuberay (index [5]). The user's request is to explore GitHub repositories and collect information about them such as descriptions, stars, or other metadata. So far, I haven't collected any information.\nMy navigation to the GitHub explore page was successful. The page loaded correctly and I can see the expected content.\nI need to capture the key repositories I've identified so far into my memory and into a file.\nSince this appears to be a multi-step task involving visiting multiple repositories and collecting their information, I need to create a structured plan in todo.md.\nAfter writing todo.md, I can also initialize a github.md file to accumulate the information I've collected.\nThe file system actions do not change the browser state, so I can also click on the bytedance/UI-TARS-desktop (index [4]) to start collecting information."}

 user 
Data written to todo.md.
Data written to github.md.
Clicked element with index 4.
</example_1>

 assistant 
```json
{
    "state_analysis": "The agent is on the United Airlines website. The task is to search for a one-way flight from SNA to SFO on August 12th, 2025, for one passenger. The website appears to have some pre-populated fields that need to be cleared. The agent needs to select the 'One-way' option, input the origin and destination, select the correct departure date, and ensure the number of passengers is set to 1 before searching.",
    "progress_evaluation": "The agent is at the beginning of the task (0% progress). The United Airlines website is loaded, but no actions have been taken yet to fulfill the search criteria.",
    "challenges": "The website has pre-populated fields that need to be cleared. Selecting the correct date from the date picker can be tricky. The agent needs to avoid making errors when inputting the origin and destination airports.",
    "next_steps": [
        "Select the 'One-way' option.",
        "Clear the 'From' and 'To' fields and input 'SNA' and 'SFO' respectively.",
        "Clear the date fields and select August 12th, 2025 from the date picker."
    ],
    "reasoning": "The next steps are crucial to setting up the flight search according to the user's request. Selecting 'One-way', inputting the correct origin and destination airports, and setting the correct departure date are essential before proceeding with the search. Clearing the pre-populated fields ensures that the search is based on the user's specified criteria."
}
```

 user 
<agent_history>
<s>Agent initialized</s>
</agent_history>
<agent_state>
<user_request>

Search for one-way flights from SNA to SFO.
- Departure Date: August 12th, 2025
- Number of Passengers: 1

Some input fields may be pre-populated. Make sure to clear them before you type into them.
Make sure to double check that the departure and return dates are selected correctly before proceeding.

Once you are presented with a list of flights, you are done.

</user_request>
<file_system>
<file>
results.md - [empty file]
</file>
</file_system>
<todo_contents>
[Current todo.md is empty, fill it with your plan when applicable]
</todo_contents>
<step_info>
Step 1 of 100 max possible steps
Current date and time: 2025-07-12 23:57
</step_info>
</agent_state>
<browser_state>
Current tab: 0
Available tabs:
Tab 0: https://www.united.com/en/us - United Airlines - Airline Tick

Interactive elements from top layer of the current page inside the viewport:
[Start of page]
[0]<div role='dialog' aria-label='cookieconsent' />
	We use cookies for site functionality, user experience, to analyze traffic and to show personalized ads from United or our third-party partners. For more information, refer to our
	[1]<a  />
		[2]<span  />
			[3]<span  />
				Privacy Policy
	.
	[4]<a role='button'>Accept cookies />
	[5]<a role='button' />
		Cookie preferences
	[6]<span aria-label='Close Banner' role='button' />
[7]<a  />
[8]<button aria-expanded='false' type='button' />
	Book
[9]<button aria-expanded='false' type='button' />
	My trips
[10]<button aria-expanded='false' type='button' />
	Travel info
[11]<button aria-expanded='false' type='button' />
	MileagePlus
[12]<button aria-expanded='false' type='button' />
	Deals
[13]<a >Help />
[14]<button aria-label='Currently in English US	$ enter to change' type='button' />
	English - US	$
[15]<a aria-label='Search, opens in a new tab' />
[16]<button aria-label='Sign in' type='button' />
[17]<button aria-label='View Cart, click to view list of recently searched saved trips.' type='button' />
[18]<button role='tab' name='travelTab' aria-label='Book a flight or trip package' />
	Book
[19]<button role='tab' name='statusTab' aria-label='Check flight status' />
	Flight status
[20]<button role='tab' aria-label='Check in a flight ' />
	[21]<span  />
		Check-in
[22]<button role='tab' aria-label='View and manage current trips ' />
	[23]<span  />
		[24]<div  />
			[25]<div  />
				[26]<div  />
					[27]<div  />
						My trips
[28]<button role='tab' aria-label='Search and book a flight' />
	Flight
[29]<button role='tab' aria-label='Search and book a United vacation.' />
	Packages
[30]<button role='tab' aria-label='Search and book a hotel' />
	Hotel
[31]<button role='tab' aria-label='Search and reserve a car' />
	Car
[32]<a aria-label='Search and book a United cruise.' />
	Cruise
[33]<fieldset role='radiogroup' />
	[34]<input type='radio' name='flightType' value='roundTrip' checked='' />
	[35]<label aria-label='Round Trip Flight search'>Roundtrip />
	[36]<input type='radio' name='flightType' value='oneWay' />
	[37]<label aria-label='One Way Flight search'>One-way />
[38]<label type='checkbox' aria-label='Book with miles' />
	[39]<input type='checkbox' name='AwardTravel' value='' />
	Book with miles
[40]<label type='checkbox' />
	[41]<input type='checkbox' name='Flexible' value='' />
	Flexible dates
[42]<label  />
	From
[43]<input type='text' placeholder='Origin' role='combobox' aria-expanded='false' value='Sydney SYD' />
[44]<label  />
	To
[45]<input type='text' placeholder='Destination' role='combobox' aria-expanded='false' value='' />
[46]<button aria-label='reverse origin and destination' type='button' />
[47]<label  />
	Dates
[48]<input type='text' placeholder='Departure' value='Sep 12' />
-
[49]<input type='text' placeholder='Return' value='Sep 14' />
[50]<button aria-expanded='false' type='button' />
[51]<label  />
	Travelers
[52]<input type='button' value='1 Adult' />
[53]<select name='bookFlightModel.cabinType' />
[54]<a title='Advanced search' />
	Advanced search
(Certificates, multi-city and upgrades)
[55]<a title='Changed bag rules' />
	Changed bag rules
and
[56]<a title='fees for optional services' />
	fees for optional services
[57]<button aria-label='Find flights' type='submit' />
	Find flights
[58]<button role='link' type='button' />
	Find your travel credits
FAST  WI-FI
[59]<button type='button' role='link' aria-label='Break the Wi-Fi barrier. Free Wi-Fi on select flights. Only with MileagePlus., you will be redirect away from united.com homepage' />
	Break the Wi-Fi barrier. Free Wi-Fi on select flights. Only with MileagePlus.
[60]<button type='button' role='link' aria-label='Join MileagePlus, you will be redirect away from united.com homepage'>Join MileagePlus />
[61]<fieldset  />
	[62]<button aria-label='Pause' type='button' value='Play' />
	[63]<button type='button' aria-label='Slide 1 of 6' value='1' />
	[64]<button type='button' aria-label='Slide 2 of 6' value='2' />
	[65]<button type='button' aria-label='Slide 3 of 6' value='3' />
	[66]<button type='button' aria-label='Slide 4 of 6' value='4' />
	[67]<button type='button' aria-label='Slide 5 of 6' value='5' />
	[68]<button type='button' aria-label='Slide 6 of 6' value='6' />
[69]<button role='link' />
Explore destinations
[70]<button aria-expanded='false' />
	[71]<div  />
		Site Feedback
... 1821 pixels below - scroll to see more or extract structured data if you are looking for specific information ...
</browser_state>
<read_state>

</read_state>


 RESPONSE
{
  "thinking": "I need to start by selecting the 'One-way' option. Then, I need to clear the 'From' and 'To' fields and input 'SNA' and 'SFO' respectively. After that, I need to clear the date fields and select August 12th, 2025 from the date picker. Finally, I need to ensure the number of passengers is set to 1 before searching.",
  "evaluation_previous_goal": "I have not yet taken any actions.",
  "memory": "The task is to search for a one-way flight from SNA to SFO on August 12th, 2025, for one passenger on United Airlines. The website has pre-populated fields that need to be cleared.",
  "next_goal": "Select the 'One-way' option.",
  "action": [
    {
      "click_element_by_index": {
        "index": 37
      }
    }
  ]
}